# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Vincent Chéry
# This file is distributed under the same license as the Monitorfish package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Monitorfish \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 17:20+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:2
#: d7c17d056a204547a098523129b80038
msgid ":py:mod:`monitorfish.datascience.src.pipeline.flows.position_alerts`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:8
#: a7ac311de8ee46eb84d29ce7ec729a3b
msgid "Module Contents"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:11
#: c24b7c28334e4f53a4a389c3474aa587
msgid "Classes"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:18:<autosummary>:1
#: 12149d07bb4241e3b5cbd4e5599d9420
msgid ":py:obj:`ZonesTable <monitorfish.datascience.src.pipeline.flows.position_alerts.ZonesTable>`\\"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:18:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:47
#: 23531cf95891495d91140d94418e9a74
#: 3ba215ce101d47abb79e44557cb5a9a6
msgid "A class to represent a table of zones which can be filtered on a given field."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:20
#: a0562a2605cd40ffb436e41536c8a3a1
msgid "Functions"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: 4787fcd438d2456f90071cd1c1cb86ce
msgid ":py:obj:`alert_has_gear_parameters <monitorfish.datascience.src.pipeline.flows.position_alerts.alert_has_gear_parameters>`\\ \\(fishing\\_gears\\: list\\, fishing\\_gear\\_categories\\: list\\) → bool"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: fab50e1cb37842828d0c6f73156800e5
msgid "Returns `True` if one of the input arguments are non empty lists, `False`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: f93ff0ad2c874d69b105897072bf0df9
msgid ":py:obj:`get_alert_type_zones_table <monitorfish.datascience.src.pipeline.flows.position_alerts.get_alert_type_zones_table>`\\ \\(alert\\_type\\: str\\) → ZonesTable"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: 2f205c8eb86a4154be6d4f619e312dca
msgid "Return a `ZonesTable` representing the table in which zones for the given"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: d62bf77320f84a34af4e0969cea02762
msgid ":py:obj:`make_positions_in_alert_query <monitorfish.datascience.src.pipeline.flows.position_alerts.make_positions_in_alert_query>`\\ \\(positions\\_table\\: sqlalchemy.Table\\, facades\\_table\\: sqlalchemy.Table\\, zones\\_table\\: ZonesTable\\, only\\_fishing\\_positions\\: bool\\, zones\\: List \\= None\\, hours\\_from\\_now\\: int \\= 8\\, flag\\_states\\: List \\= None\\, except\\_flag\\_states\\: List \\= None\\) → sqlalchemy.sql.Select"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:100
#: 9c7065b75a06498a97f2fcc820eef970
#: 2e9074add99d49e5a81cd9ed28ca3f95
msgid "Creates select statement for the query to execute to compute positions in alert."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: d8f74d55d1d0428f886c022203e90425
msgid ":py:obj:`make_fishing_gears_query <monitorfish.datascience.src.pipeline.flows.position_alerts.make_fishing_gears_query>`\\ \\(fishing\\_gears\\_table\\: sqlalchemy.Table\\, fishing\\_gears\\: List\\[str\\] \\= None\\, fishing\\_gear\\_categories\\: List\\[str\\] \\= None\\) → sqlalchemy.sql.Select"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: bf6a913e483a4cceba99da94e9b2fa89
msgid "Creates select statement for the query to execute to get the list of gear codes for"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: 0e4f5e2fd77e482b84b5918d94ae6bd6
msgid ":py:obj:`extract_current_gears <monitorfish.datascience.src.pipeline.flows.position_alerts.extract_current_gears>`\\ \\(\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: a63ea08f59f741c5842bbbdc2dc55019
msgid "Extracts of vessels in `last_positions` with their current (known or probable)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: ccef33d95af64292840027b3df488550
msgid ":py:obj:`extract_gear_codes <monitorfish.datascience.src.pipeline.flows.position_alerts.extract_gear_codes>`\\ \\(query\\: sqlalchemy.sql.Select\\) → set"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: 5da3f127c21a4deea39445c26ef4a934
msgid "Executes the input `sqlalchemy.Select` statement, expected to contain a"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: 9a74493c895d43d1beb59e9a154459ba
msgid ":py:obj:`filter_on_gears <monitorfish.datascience.src.pipeline.flows.position_alerts.filter_on_gears>`\\ \\(positions\\_in\\_alert\\: pandas.DataFrame\\, current\\_gears\\: pandas.DataFrame\\, gear\\_codes\\: set\\, include\\_vessels\\_unknown\\_gear\\: bool\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: 01a9a8243fb247a89c77fa910ff62d3c
msgid "Filters input `positions_in_alert` to keep only rows for which the vessel's"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: 7cf46796b2d3455a843251cde7af6a21
msgid ":py:obj:`merge_risk_factor <monitorfish.datascience.src.pipeline.flows.position_alerts.merge_risk_factor>`\\ \\(positions\\_in\\_alert\\: pandas.DataFrame\\, current\\_risk\\_factors\\: pandas.DataFrame\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: 8c7ba8f419454e3e8c1f744b721b1aa6
msgid ":py:obj:`get_vessels_in_alert <monitorfish.datascience.src.pipeline.flows.position_alerts.get_vessels_in_alert>`\\ \\(positions\\_in\\_alert\\: pandas.DataFrame\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:35:<autosummary>:1
#: 77ac9441dc464e54a14cc9c4495636db
msgid "Returns a `DataFrame` of unique vessels in alert from the input `DataFrame` of"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:37
#: fdd967f436ae446f9b4dce1265cb2fa8
msgid "Attributes"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:44:<autosummary>:1
#: 2ba321ec259c49faa7ad2c4bb0c50b64
msgid ":py:obj:`flow_not_running <monitorfish.datascience.src.pipeline.flows.position_alerts.flow_not_running>`\\"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:44:<autosummary>:1
#: 050b01ae9c2b4b7288c2b5fd054712b8
msgid ":py:obj:`file_name <monitorfish.datascience.src.pipeline.flows.position_alerts.file_name>`\\"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:53
#: 87cf311f2cf84611ad88b7e9e2f0f410
msgid "Args:"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:50
#: 073de937f4014e60bc5124b138c7d54d
msgid "table (Table): A SQLAchemy `Table` geometry_column (str): name of the geometry column filter_column (str): name of the column on which to filter (typically the id or unique name of zones)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:58
#: ac51c421e2194dc19bef1921296470a0
msgid "Raises:"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:56
#: caa8d1b86b3043f7a691e3a2179546a4
msgid "AssertionError: if `filter_column` is not a column of `table` or `geometry_column` is not a column of `Table` of type `geoalchemy2.Geometry`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:62
#: 9095e4a8d6be469fa6e87fe2422e9371
msgid "Return repr(self)."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:68
#: 8b12d240d87d4cefab13859f382b8340
msgid "Returns `True` if one of the input arguments are non empty lists, `False` otherwise."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: 921790eae6154a1fbff53d180100c4c9
#: 1187adc68d2748a2878e834b3e4d0a0b
#: da88450c80724fdf9e7cd83558e16e1c
#: 19cb569939a444188e0063ebbeaf3387
msgid "Parameters"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:71
#: 0276527f6acd4108969656314b727140
msgid "list of gears or `None`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:73
#: 97bbecaecca3480baf5347b0d593c66f
msgid "list of gear_categories or `None`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: 56c38290687b46eda90a45c3c3b86c91
#: 35577dd4020143eeab27d5b5ce99bc23
#: 1031dff11522413388ca57a6705e4e34
msgid "Returns"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:76
#: 855b5d55270e472c9d4410a6436e667b
msgid "`True` if one of the input arguments are non empty lists, `False` otherwise."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: 124e69873c784945afa4551d62a229e8
#: c52830cbd9ff46939c7c56ade67dc188
#: ea991f0a16d54f1c9385358a89801ce8
msgid "Return type"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:0
#: 46a151c4c57245ce9ed332e6482e6e2f
#: 997d82bdc41b4fa3b052e0a4dd65ee38
msgid "Raises"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:80
#: 347a95748e894fb5a8856ed596192de4
msgid "if the input arguments are not lists or `None`."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:85
#: cdc3c29ed5a24b2a83cff2d095ff6e45
msgid "Return a `ZonesTable` representing the table in which zones for the given `alert_type` are stored."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:88
#: e911c6ae67d0498f8c43bca068208260
msgid "the type of alert."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:91
#: 2cc7ca4766e14d3a986c6518de1bc36d
msgid "table in which to look for the zones for the given alert type."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:94
#: 93e295cac9084a47819ce5b3a5df1f64
msgid "if the input `alert_type` does not correspond to one of the expected types of alert."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:102
#: ebed8fa684ce4c20a99b17e0c3e10e6e
msgid "`SQLAlchemy.Table` of positions."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:104
#: 4383a2d5717a4013aa4220ddb7073a3d
msgid "`SQLAlchemy.Table` of façades."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:106
#: 08b8ab2b25e848f188b7cf2d5d34f181
msgid "`ZonesTable` of zones."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:108
#: a7ed55f248a8446dae03d20cdb0662ed
msgid "If `True`, filters positions to keep only positions tagged as `is_fishing`."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:111
#: a5b4ffef2f804d15aff13933d60f4ffc
msgid "If provided, adds a 'WHERE zones.filter_column IN zones' clause to the query. Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:114
#: 32837ca4fdd342f79c9edfd5e0156f5c
msgid "Determines how many hours back in the past the `positions` table will be scanned. Defaults to 8."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:117
#: b4d79ba1880c4b9da65e642f1897b3e6
msgid "If given, filters positions to keep only those of vessels that belong to these flag_states. Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:120
#: 9d1a9fc007a448d8a607e9b511744e1b
msgid "If given, filters positions to keep only those of vessels that do NOT belong to these flag_states. Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:124
#: b590bac3de664dea914ed305558aab3d
msgid "`SQLAlchemy.Select` statement corresponding to the given parameters."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:130
#: 69f1ccb78cd643ca879bda09be6ace45
msgid "Creates select statement for the query to execute to get the list of gear codes for which to generate alerts."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:136
#: e302b06b5ce648959790ccf37c0808db
msgid "Extracts of vessels in `last_positions` with their current (known or probable) gear(s)."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:139
#: d9c1819837e44fd7b62e11035f8dfcae
msgid "For vessels that have non null `gear_onboard` (for their last DEP) in `last_positions`, these gears are used"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:141
#: 6814ec7a4f97428d9785357fd0ac8ea1
msgid "For other vessels, the `gears_declared` from the `vessels` table are used."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:146
#: d48aa3234cfb48888db25676184b642f
msgid "Executes the input `sqlalchemy.Select` statement, expected to contain a `fishing_gear_code` column, returns said columns results as a `set`."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:152
#: bb98d82f136b4df7a03440ac5cbfbdf6
msgid "Filters input `positions_in_alert` to keep only rows for which the vessel's current gears are included in `gear_codes`."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:155
#: b9486cba5beb4f15a8069e9f4cf20c99
msgid "DataFrame of positions. Must have columns \"cfr\", \"external_immatriculation\", \"ircs\""
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:158
#: 817a872c68c84e1cb212c3e300f8c3b0
msgid "DataFrame of vessels. Must have columns \"cfr\", \"external_immatriculation\", \"ircs\", \"current_gears\""
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:161
#: a07aa4b7040442369875874a9b979a34
msgid "set of gear_codes"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:163
#: dc879deaceaf4d09aa88fb03d6ae696c
msgid "if `True`, `positions_in_alert` for which the corresponding vessel does not have any known gears (because the vessel is either absent of the `current_gears` DataFrame or has `None` in the `current_gears` field of that DataFrame) are kept. Otherwise, those rows are discarded."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/position_alerts/index.rst:176
#: 968fc2a02c204c07be1bb11b77cff7bb
msgid "Returns a `DataFrame` of unique vessels in alert from the input `DataFrame` of positions in alert. For each vessel, the date of the most recent position is used as `creation_datetime` for the alert."
msgstr ""
