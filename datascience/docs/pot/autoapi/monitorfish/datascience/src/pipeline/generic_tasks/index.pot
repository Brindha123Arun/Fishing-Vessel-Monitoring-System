# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Vincent Chéry
# This file is distributed under the same license as the Monitorfish package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Monitorfish \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 17:20+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:2
#: bdb62add25a0463fac3df3c8efc98855
msgid ":py:mod:`monitorfish.datascience.src.pipeline.generic_tasks`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:8
#: e08f1e608d0a4d6a9ddcc59552f5a784
msgid "Module Contents"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:12
#: dff46660e41a461488757f2132df540e
msgid "Functions"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:23:<autosummary>:1
#: 9639829b3555400189d5e1243a897500
msgid ":py:obj:`extract <monitorfish.datascience.src.pipeline.generic_tasks.extract>`\\ \\(db\\_name\\: str\\, query\\_filepath\\: Union\\[pathlib.Path\\, str\\]\\, dtypes\\: Union\\[None\\, dict\\] \\= None\\, parse\\_dates\\: Union\\[list\\, dict\\, None\\] \\= None\\, params\\=None\\, backend\\: str \\= \\'pandas\\'\\, geom\\_col\\: str \\= \\'geom\\'\\, crs\\: Union\\[int\\, None\\] \\= None\\) → Union\\[pandas.DataFrame\\, geopandas.GeoDataFrame\\]"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:23:<autosummary>:1
#: d3b7c0799c574a7db42e3d0c60d26a64
msgid "Run SQL query against the indicated database and return the result as a"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:23:<autosummary>:1
#: ce973b47a5964ee8a162fcfc81285738
msgid ":py:obj:`load <monitorfish.datascience.src.pipeline.generic_tasks.load>`\\ \\(df\\: Union\\[pandas.DataFrame\\, geopandas.GeoDataFrame\\]\\, \\*\\, table\\_name\\: str\\, schema\\: str\\, logger\\: logging.Logger\\, how\\: str \\= \\'replace\\'\\, db\\_name\\: str \\= None\\, pg\\_array\\_columns\\: list \\= None\\, handle\\_array\\_conversion\\_errors\\: bool \\= True\\, value\\_on\\_array\\_conversion\\_error\\: str \\= \\'\\{\\}\\'\\, jsonb\\_columns\\: list \\= None\\, table\\_id\\_column\\: str \\= None\\, df\\_id\\_column\\: str \\= None\\, nullable\\_integer\\_columns\\: list \\= None\\, timedelta\\_columns\\: list \\= None\\, enum\\_columns\\: list \\= None\\, connection\\: sqlalchemy.engine.Connection \\= None\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:23:<autosummary>:1
#: 6a36b48d822d4227834f94fa260519aa
msgid "Load a DataFrame or GeoDataFrame to a database table using sqlalchemy. The table"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:23:<autosummary>:1
#: c6129105c8c8404d9d723fafc602aceb
msgid ":py:obj:`load_with_connection <monitorfish.datascience.src.pipeline.generic_tasks.load_with_connection>`\\ \\(df\\: Union\\[pandas.DataFrame\\, geopandas.GeoDataFrame\\]\\, \\*\\, connection\\: sqlalchemy.engine.Connection\\, table\\_name\\: str\\, schema\\: str\\, logger\\: logging.Logger\\, how\\: str \\= \\'replace\\'\\, table\\_id\\_column\\: Union\\[None\\, str\\] \\= None\\, df\\_id\\_column\\: Union\\[None\\, str\\] \\= None\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:23:<autosummary>:1
#: c51582abb25b4357bd35c92e293fdf89
msgid ":py:obj:`delete_rows <monitorfish.datascience.src.pipeline.generic_tasks.delete_rows>`\\ \\(table\\_name\\: str\\, schema\\: str\\, db\\_name\\: str\\, table\\_id\\_column\\: str\\, ids\\_to\\_delete\\: set\\, logger\\: logging.Logger\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:23:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:141
#: 557b65722ff04f768ac238d7ae47481a
#: 6a0e65ad41014dbba3dd919b0849db8e
msgid "Delete rows from a database table."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:23:<autosummary>:1
#: 05f52d03198a4f9cbe278a3abb7f8d65
msgid ":py:obj:`read_query_task <monitorfish.datascience.src.pipeline.generic_tasks.read_query_task>`\\ \\(database\\: str\\, query\\: sqlalchemy.sql.Select\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:23:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:161
#: b57e4def4bb249bcaf1ebfc88e50b3a4
#: a91af9e5b3de44aea0f1371cebbe15c1
msgid "Prefect `task` decorated version of `read_query`."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:26
#: fcc6a23f1a6e431cbd04ec5c0e655a79
msgid "Run SQL query against the indicated database and return the result as a `pandas.DataFrame`."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:0
#: 4cb53c890a2547c4bad453ed1c298a2f
#: b5c34dd3c71b49879c8a233f6c213478
#: b9e65e7655ab4667867854e889b5a262
msgid "Parameters"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:29
#: 53023171fa1f44b5a54eaa1abdf4dc4a
msgid "name of the database to extract from : \"fmc\", \"ocan\", \"monitorfish_local\" or \"monitorfish_remote\""
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:32
#: 24f70cbea6c5477eadd1cc00f9421875
msgid "path to .sql file, starting from the saved queries folder. example : \"ocan/nav_fr_peche.sql\""
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:35
#: 59f62102c838438b967316cefa880974
msgid "If specified, use {col: dtype, …}, where col is a column label and dtype is a numpy.dtype or Python type to cast one or more of the DataFrame’s columns to column-specific types. Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:40
#: 7e6c653d0aff4e35954a727155d230ee
msgid "- List of column names to parse as dates. - Dict of ``{column_name: format string}`` where format string is   strftime compatible in case of parsing string times or is one of   (D, s, ns, ms, us) in case of parsing integer timestamps. - Dict of ``{column_name: arg dict}``, where the arg dict corresponds   to the keyword arguments of :func:`pandas.to_datetime`  Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:41
#: 5b83e04738b84528bb6ab449b2ec6e7c
msgid "List of column names to parse as dates."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:42
#: 764a1f2390f84679b8868e9203cb9bc4
msgid "Dict of ``{column_name: format string}`` where format string is strftime compatible in case of parsing string times or is one of (D, s, ns, ms, us) in case of parsing integer timestamps."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:45
#: 73b63a0148394ea8b88602ca7c8771ef
msgid "Dict of ``{column_name: arg dict}``, where the arg dict corresponds to the keyword arguments of :func:`pandas.to_datetime`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:48
#: 222d921ba71e4cd69fe68c11737721ee
msgid "Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:50
#: faeb9cdba81e4cbf8a9062f3c3b72588
msgid "Parameters to pass to execute method. Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:53
#: 3612be855973484380603c506761280c
msgid "'pandas' to run a SQL query and return a `pandas.DataFrame` or 'geopandas' to run a PostGIS query and return a `geopandas.GeoDataFrame`. Defaults to 'pandas'."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:57
#: 46f249248d744e2f8842118c1dd956ee
msgid "column name to convert to shapely geometries when `backend` is 'geopandas'. Ignored when `backend` is 'pandas'. Defaults to 'geom'."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:61
#: af922e6b3bb3481fbaf3c5437ca3b0d5
msgid "CRS to use for the returned GeoDataFrame; if not set, tries to determine CRS from the SRID associated with the first geometry in the database, and assigns that to all geometries. Ignored when `backend` is 'pandas'. Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:0
#: 292d72fb51b5494d98a7b0942c99925d
msgid "Returns"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:67
#: cadaf4d4e5bd43fa8d94c79e8defe8b7
msgid "Query results"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:0
#: d6832d82fc70412ea645a00c731a5376
msgid "Return type"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:73
#: 7ebe7daefcec4e5089c7680cbbd75232
msgid "Load a DataFrame or GeoDataFrame to a database table using sqlalchemy. The table must already exist in the database."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:76
#: 06e8369573c84abd8cafb0c75eaa5110
msgid "data to load"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:78
#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:143
#: 94e2c7dd1d6e437db1243441ee940d4e
#: 5650565de1cf424490fe9f976ac1a011
msgid "name of the table"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:80
#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:145
#: f8502ebdaa494e249d01ade0dc809e8c
#: b4d90f72f2ae45c2a370d24f68b7e450
msgid "database schema of the table"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:82
#: dce822d31f224bf9ae84520e27d23b83
msgid "logger instance"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:84
#: 16da683741014535be7275f5feebcde8
msgid "one of  - 'replace' to delete all rows in the table before loading - 'append' to append the data to rows already in the table - 'upsert' to append the rows to the table, replacing the rows whose id is   already"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:84
#: a8f0f2b3d84a46aeb4112674552d6dac
msgid "one of"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:86
#: b45921ac5d694dc7b9b40c11538191be
msgid "'replace' to delete all rows in the table before loading"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:87
#: 6478fa5266c04daeb39291b2164fb1f4
msgid "'append' to append the data to rows already in the table"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:88
#: 4bfc969ba82e4bc09401cf716cdb924f
msgid "'upsert' to append the rows to the table, replacing the rows whose id is already"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:91
#: 3e2c0af73e67447ca7edf33cabcff1b6
msgid "Required if a `connection` is not provided. 'monitorfish_remote' or 'monitorfish_local'. Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:94
#: 71adaeb3ccab4185ae538d12f8dd4741
msgid "columns containing sequences that must be serialized before loading into columns with Postgresql `Array` type"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:97
#: efec4710108148e9b6da8c9a8026cf34
msgid "whether to handle or raise upon error during the serialization of columns to load into Postgresql `Array` columns. Defaults to True."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:101
#: d39f52d1fac042c8b2e5232a147d49cb
msgid "if `handle_array_conversion_errors`, the value to use when an error must be handled. Defaults to '{}'."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:105
#: f62594dbaacc48458ed74f0947463957
msgid "columns containing values that must be serialized before loading into columns with Postgresql `JSONB` type"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:108
#: 8ddf22fc1f0b42b98464933f868b5fcd
msgid "name of the table column to use an id. Required if `how` is \"upsert\"."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:111
#: f38ae158141e4d34abc1e6701064b5c9
msgid "name of the DataFrame column to use an id. Required if `how` is \"upsert\"."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:114
#: 2e175a6b833e4cf9b5f22753c67aa08f
msgid "columns containing values that must loaded into columns with Postgresql `Integer` type. If these columns contain `NA` values, pandas will automatically change the dtype to `float` and the loading into Postgreql `Integer` columns will fail, so it is necessary to serialize these values as `Integer`-compatible `str` objects."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:120
#: 7991b8c06ab1423892e13a78c5045dd2
msgid "columns containing `Timedelta` values to load into Postgresql `Interval` columns. If these columns contain `NaT` values, the loading will fail, so it is necessary to serialize these values as `Interval`-compatible `str` objects."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:125
#: ff1dfd51ff594c68b4138e7d6416377c
msgid "columns containing Enum values to load into Postgresql. Values in these columns will be converted to string using the enum's `.value`. Null values will remain null."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:129
#: d8abfbec942d4c829fd023c51acf2bd6
msgid "Databse connection to use for the insert operation. If not provided, `db_name` must be given and a connection to the designated database will be created for the insert operation. Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:147
#: 8c29e1207a094ca7b74e99081c4b6c39
msgid "name of the database. One of - 'monitorfish_remote' - 'monitorfish_local'"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:151
#: f349b6c65a17422e95b3ec4cc47f8d6a
msgid "name of the id column in the database."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:153
#: 18e40238eb3544f5b6ed07e11ead64f6
msgid "the ids of the rows to delete."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/generic_tasks/index.rst:155
#: 6a1044993a524da7b1068f4051b862db
msgid "logger instance."
msgstr ""
