# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Vincent Chéry
# This file is distributed under the same license as the Monitorfish package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Monitorfish\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 17:20+0100\n"
"PO-Revision-Date: 2022-11-16 16:46+0000\n"
"Language-Team: French (https://www.transifex.com/ministere-de-la-transition-ecologique-et-solidaire-1/teams/124045/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:2
#: af34832729654d9eb4ecd26eb93f69c5
msgid ":py:mod:`monitorfish.datascience.src.pipeline.processing`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:8
#: bfa34bdd70bd45319177f960dabc103c
msgid "Module Contents"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:12
#: 0fc33f3ef5df4a66aa7b173b42370ecb
msgid "Functions"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 8521049dce644a108b851f9e06360ea2
msgid ""
":py:obj:`get_unused_col_name "
"<monitorfish.datascience.src.pipeline.processing.get_unused_col_name>`\\ "
"\\(col\\_name\\: str\\, df\\: pandas.DataFrame\\) → str"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 48be46f8430b46948e0950265005502b
msgid ""
"If `col_name` is not already a column name of the DataFrame `df`, returns"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: c28af6a1de0a4e549d15db7303b3d66f
msgid ""
":py:obj:`is_a_value "
"<monitorfish.datascience.src.pipeline.processing.is_a_value>`\\ \\(x\\) → "
"bool"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:72
#: e8bc0aa05e424791b878d92cebce0d94 7752825c1feb4f41ade24bb686d21b48
msgid "Returns False if pd.isna(x), True otherwise."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 91245882a5944ea1a61175de957910e8
msgid ""
":py:obj:`concatenate_values "
"<monitorfish.datascience.src.pipeline.processing.concatenate_values>`\\ "
"\\(row\\: pandas.Series\\) → List"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: fc593e26d25647cdb649e3da9df1e42e
msgid ""
"Filters the input pandas Series to keep only distinct non null values and "
"returns"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: a28962b8a4ca452d924daef7d0c95d11
msgid ""
":py:obj:`concatenate_columns "
"<monitorfish.datascience.src.pipeline.processing.concatenate_columns>`\\ "
"\\(df\\: pandas.DataFrame\\, input\\_col\\_names\\: List\\) → pandas.Series"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 5f880159d83c46fcb312941ac99ce8b9
msgid ""
"For each row in the input DataFrame, the distinct and non null values "
"contained in"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 71f5516593d149d489f606348ac3e55d
msgid ""
":py:obj:`coalesce "
"<monitorfish.datascience.src.pipeline.processing.coalesce>`\\ \\(df\\: "
"pandas.DataFrame\\) → pandas.Series"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: c43a903cf9bd49f887726974592b7052
msgid ""
"Combines the input DataFrame's columns into one by taking the non null value"
" in"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: f18c0289a1084d63a4f95522bfb4dadf
msgid ""
":py:obj:`get_first_non_null_column_name "
"<monitorfish.datascience.src.pipeline.processing.get_first_non_null_column_name>`\\"
" \\(df\\: pandas.DataFrame\\, result\\_labels\\: Union\\[None\\, dict\\] \\="
" None\\) → pandas.Series"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 69dce1c03be544d7983d6608520704f5
msgid ""
"Returns a Series with the same index as the input DataFrame, whose values "
"are"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 6a5de1ef2b134d5682e40027d2ed6f0d
msgid ""
":py:obj:`remove_nones_from_dict "
"<monitorfish.datascience.src.pipeline.processing.remove_nones_from_dict>`\\ "
"\\(d\\: dict\\) → dict"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:148
#: a695e5d5e80c45c09b4e43ab6d8e1671 10bbf1b5b8274388b00587341ca4f2f0
msgid "Takes a dictionary and removes ``None`` values from it."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 0ad4649a2dee4345b97ff201680b95b6
msgid ""
":py:obj:`df_to_dict_series "
"<monitorfish.datascience.src.pipeline.processing.df_to_dict_series>`\\ "
"\\(df\\: pandas.DataFrame\\, result\\_colname\\: str \\= \\'json\\_col\\'\\,"
" remove\\_nulls\\: bool \\= False\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: aafdeca404a242f982423271771fbcbd
msgid ""
"Converts a pandas DataFrame into a Series with the same index as the input"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: e9d4a069ec3f4d13997bfeff86cef12a
msgid ""
":py:obj:`zeros_ones_to_bools "
"<monitorfish.datascience.src.pipeline.processing.zeros_ones_to_bools>`\\ "
"\\(x\\: Union\\[pandas.Series\\, pandas.DataFrame\\]\\) → "
"Union\\[pandas.Series\\, pandas.DataFrame\\]"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 16dc02c550ab4edfa8f37baff530a130
msgid ""
"Converts a pandas DataFrame or Series containing `str`, `int` or `float` "
"values,"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: fe25a809664e476aa6d14e9d907a4a67
msgid ""
":py:obj:`to_pgarr "
"<monitorfish.datascience.src.pipeline.processing.to_pgarr>`\\ \\(x\\: "
"Union\\[list\\, set\\, numpy.ndarray\\]\\, handle\\_errors\\: bool \\= "
"False\\, value\\_on\\_error\\: Union\\[str\\, None\\] \\= None\\) → "
"Union\\[str\\, None\\]"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: d722356b173c44f3b836c8e0c5bad8c5
msgid ""
"Converts a python `list`, `set` or `numpy.ndarray` to a string with "
"Postgresql"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 8774971c91e04281a6cd24f7e9a4d8db
msgid ""
":py:obj:`df_values_to_psql_arrays "
"<monitorfish.datascience.src.pipeline.processing.df_values_to_psql_arrays>`\\"
" \\(df\\: pandas.DataFrame\\, handle\\_errors\\: bool \\= False\\, "
"value\\_on\\_error\\: Union\\[str\\, None\\] \\= None\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: e731e819e94c418b9a4f22b5af758a65
msgid "Returns a `pandas.DataFrame` with all values serialized as strings"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 1116230698eb41e1a50590159196e517
msgid ""
":py:obj:`json_converter "
"<monitorfish.datascience.src.pipeline.processing.json_converter>`\\ \\(x\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:276
#: b0c5da16244742fcb4b46f62c7823eba 8d1a48adbaaa4266befc214dc798f5c5
msgid "Converter for types not natively handled by json.dumps"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: c530d5125e04463faf65288b5911022d
msgid ""
":py:obj:`to_json "
"<monitorfish.datascience.src.pipeline.processing.to_json>`\\ \\(x\\: Any\\) "
"→ str"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:281
#: 9eefb130231f462c959e517644b10f61 bc5c3786496d462096952ec4871c19f6
msgid "Converts python object to json string."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 1c542be77fb945318e53f2f897ce28b1
msgid ""
":py:obj:`df_values_to_json "
"<monitorfish.datascience.src.pipeline.processing.df_values_to_json>`\\ "
"\\(df\\: pandas.DataFrame\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:286
#: 63b1bcc88635418aa2b029e51ac99dc8 c3600d7483b346faaa138f2a21fbde21
msgid ""
"Returns a `pandas.DataFrame` with all values serialized to json string."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: c1f80649bd6a48d0bef4773331e7645a
msgid ""
":py:obj:`serialize_nullable_integer_df "
"<monitorfish.datascience.src.pipeline.processing.serialize_nullable_integer_df>`\\"
" \\(df\\: pandas.DataFrame\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 41d78f8c3baa44c2b7ebf72e4825b27e
msgid ""
"Serializes the values of a DataFrame that contains numbers that represent"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 104150729dea463293d46c9532d320b6
msgid ""
":py:obj:`serialize_timedelta_df "
"<monitorfish.datascience.src.pipeline.processing.serialize_timedelta_df>`\\ "
"\\(df\\: pandas.DataFrame\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 4305249c748440f28da8182b6c97f255
msgid "Serializes the values of a DataFrame that contains `timedelta` values."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: b4d341251a3740d2b8f947a679e1eb9d
msgid ""
":py:obj:`drop_rows_already_in_table "
"<monitorfish.datascience.src.pipeline.processing.drop_rows_already_in_table>`\\"
" \\(df\\: pandas.DataFrame\\, df\\_column\\_name\\: str\\, table\\: "
"sqlalchemy.Table\\, table\\_column\\_name\\: str\\, connection\\: "
"sqlalchemy.engine.base.Connection\\, logger\\: logging.Logger\\) → "
"pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 292aed271b3b4680ab84a0464d610d59
msgid ""
"Removes rows from the input DataFrame `df` in which the column "
"`df_column_name`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: ed11525529b948388efcfbe0a04da317
msgid ""
":py:obj:`prepare_df_for_loading "
"<monitorfish.datascience.src.pipeline.processing.prepare_df_for_loading>`\\ "
"\\(df\\: pandas.DataFrame\\, logger\\: logging.Logger\\, "
"pg\\_array\\_columns\\: list \\= None\\, "
"handle\\_array\\_conversion\\_errors\\: bool \\= True\\, "
"value\\_on\\_array\\_conversion\\_error\\=\\'\\{\\}\\'\\, jsonb\\_columns\\:"
" list \\= None\\, nullable\\_integer\\_columns\\: list \\= None\\, "
"timedelta\\_columns\\: list \\= None\\, enum\\_columns\\: list \\= None\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: b3e8a13419a446388cdc525a1740e6ee
msgid ""
":py:obj:`join_on_multiple_keys "
"<monitorfish.datascience.src.pipeline.processing.join_on_multiple_keys>`\\ "
"\\(left\\: pandas.DataFrame\\, right\\: pandas.DataFrame\\, "
"or\\_join\\_keys\\: list\\, how\\: str \\= \\'inner\\'\\, "
"and\\_join\\_keys\\: list \\= None\\, coalesce\\_common\\_columns\\: bool "
"\\= True\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: f81fe7e7f9ad4aaf9000aa5f4da6c7bf
msgid ""
"Join two pandas DataFrames, attempting to match rows on several keys by"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 048535183085410891113cb1027b5e49
msgid ""
":py:obj:`left_isin_right_by_decreasing_priority "
"<monitorfish.datascience.src.pipeline.processing.left_isin_right_by_decreasing_priority>`\\"
" \\(left\\: pandas.DataFrame\\, right\\: pandas.DataFrame\\) → pandas.Series"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 40a6a71e46ba450181a0333a366f1a43
msgid ""
"Performs an operation similar to `pandas.DataFrame.isin` on multiple "
"columns, with"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: a02feed46b834553872c82e2d6ffd7d4
msgid ""
":py:obj:`drop_duplicates_by_decreasing_priority "
"<monitorfish.datascience.src.pipeline.processing.drop_duplicates_by_decreasing_priority>`\\"
" \\(df\\: pandas.DataFrame\\, subset\\: List\\[str\\]\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 2e33925ea0524201aa72cf073389f338
msgid "Similar to `pandas.DataFrame.drop_duplicates(subset=subset)`, with the"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: bb2303c95d994f2596a38457de3e7e28
msgid ""
":py:obj:`try_get_factory "
"<monitorfish.datascience.src.pipeline.processing.try_get_factory>`\\ "
"\\(key\\: Hashable\\, error\\_value\\: Any \\= None\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: c0dfac8f92d54c69b474f049a8deef2f
msgid ""
":py:obj:`array_equals_row_on_window "
"<monitorfish.datascience.src.pipeline.processing.array_equals_row_on_window>`\\"
" \\(arr\\: numpy.array\\, row\\: numpy.array\\, window\\_length\\: int\\) → "
"numpy.array"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 9bb3d7ace3c04452affbea3d5b6f69d5
msgid ""
"Tests whether each row of an input 2D array is the last of a sequence of"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 2c730565e015453bbae343f1645de8c5
msgid ""
":py:obj:`back_propagate_ones "
"<monitorfish.datascience.src.pipeline.processing.back_propagate_ones>`\\ "
"\\(arr\\: numpy.array\\, steps\\: int\\) → numpy.array"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: cae855df1ebf43889e15c4eebe18ffdd
msgid ""
"Given a 1D array with values `0.0`, `1.0` and `np.nan`, propagates `1.0` "
"backward"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 1c01d99b258d436b923081534ad7dfa8
msgid ""
":py:obj:`rows_belong_to_sequence "
"<monitorfish.datascience.src.pipeline.processing.rows_belong_to_sequence>`\\"
" \\(arr\\: numpy.array\\, row\\: numpy.array\\, window\\_length\\: int\\) → "
"numpy.array"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 81003e1b736f48069ee567ef83de5cbc
msgid "Tests whether each row of an input 2D array belongs to a sequence of"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: 2636b15aa1754c96851d2091a5e71cca
msgid ""
":py:obj:`get_matched_groups "
"<monitorfish.datascience.src.pipeline.processing.get_matched_groups>`\\ "
"\\(string\\: str\\, regex\\: re.Pattern\\) → pandas.Series"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:44:<autosummary>:1
#: e8fabe9a5d8e46deaf51d3277b5f7a51
msgid ""
"Matches the input `str` with the input `Pattern` and returns a pandas "
"`Series`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:47
#: 4172e80b63354db095e46b0405dd5be8
msgid ""
"If `col_name` is not already a column name of the DataFrame `df`, returns "
"`col_name`. Otherwise, appends a number to `col_name`, trying 0, 1, 2, ... "
"until a unused column name if found."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: 8c70aa2990a24e35a90332604a7454ff 994ab06ddbcb4120a51e4396b58e944a
#: 08c8fd33a20e4446888545ebf119978f 1c2fdfda01fc432d9b9f4456b130aa94
#: ff7403fad1964b30a0d50555825785f9 7dea7ce74d4f4f7da368c01ef47cee36
#: a9a71184b8e84a1ab52e968a47aa2cc4 eb76ebfb855b405a83bf4ffe782340ef
#: 1ef3c9641900400cbf52641188292126 8dfb805cc8e143ccb4ecf35bf9a063d7
#: b8c80521e4624e86b347b37f123e288b 1839f6e3af7846d2b7cf92c48a85f1ba
#: 00b0e23fa837407ea0c387056a95e519 6d82c06be9724d89831185684ecdad4e
#: 15654c1967f442d0b8193f424d2a731f e30c84f58e0149d4aa783d7a3e7043f7
#: a20823b6a5bf4202aa968b4b61815b80 b0b172916d9e418993cad4614a74acc0
#: 17737c8259ab4199abfcba8d70a6efc2 9bddfb17a4ce4f00ac67761498cb629f
msgid "Parameters"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:51
#: e4481110879d4681a62bff976dc282d4
msgid "desired column name"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:53
#: 785c00e1d114487889363f1f058fb009
msgid ""
"DataFrame for which we want to ensure the column name is not already used"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: 8385d79a843e4c2caecb8ef0b4b12bf8 a55d9893f72d4940a313cb55982d05ef
#: 8553c228d31349239c3d0829bac1d170 e43b5de866fd48f4be4d1be8ee20c1c1
#: a92a9c17ab6a47649bb7ee7d21d09133 4c251135bf784e7293470d8711b8f4c2
#: 617f263cda24498b9e22c6ded5410ed7 44c1b939e84a40b1adab7769a5501856
#: 0dcd4cef2de1442ca0fbe90dd076a766 fa2ec2cf8b1d4c4bbfc4b435888ac83e
#: be4a690c25cf49ba984d5d73e77bfa19 897ee6da6d5c4ec8882883afff3b79e4
#: e1f70f4975544b94a55fd57c2acd312c 4d2ae7298fb544b5a32a772b95e6037c
#: 66e98ef090b34d3aa6910eafd6e4d28d 510b624da731447a91d8cb1b588e6e2b
#: 3723d1ff8078436eb70dca43f1101e7c 228b654ae39343acae1106da8427978f
#: 7db2989e49ff40cba13b00b80414b15f b3894c3a33324f31a80c8270c0efcc1e
msgid "Returns"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:57
#: 12b5bd7b81fe47ee91d1c405b1bd9a6d
msgid "column name"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: e209a8bbdb4c40e6b899160f9cd51b35 eefd41ffbdca4e81aba094b9826cc6f6
#: 66248b69cca4464693def70c7215214f e010d55b59f3498fa9a4b06f717b3eba
#: bf8a5211b34845ada81baf7a50077eb1 1eb6aaf4e25f459bae7cdb442f2c301d
#: 20b59a89837746cf96e44b08f272c138 581014b86aab4032a746eeb039db0c43
#: 6ddaf4890b49408c90cf01c1c6a2ef16 425f9fd2e32a4ce88c0029ec21b497f3
#: ff4dbe459ae249a3aa6f24350696d24d e8463b2a4a8146beb1aa794489a5582a
#: 8902cc2421a140b1bea908a6c57ff0da b90ba8ab1b574602b147ad6b33821e87
#: 91f4700f7b264319ae1cb4fbfa94ea80 efcd733d29e846c585799ab64bdb1ced
#: bead39a371ef466ab2d3cb7a2f02865c a493582c9646432ebb02b24e046c07ed
#: c7fe585986784466bd6edfe6c2393139 4da8b7a855dc4dd5af5c37e3fd37ebab
msgid "Return type"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:61
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:157
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:238
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:501
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:529
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:562
#: 356c5a4fc1424277811fd12228a0a1a5 78d563d5437648d5b17fd2eb0ad2ff56
#: 7ef56f7371864fd8ab0756af09938f03 64d7954882264d4fb860ee1ed4a42b2e
#: a579c6999e8d43df894dbc83ab3f043f 035572e2e6a74d7ea3733245a33f1b67
msgid "Examples"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:74
#: 52594c2ee8f74164b0d8c6b6d3f70be1
msgid ""
"NB : The same result could be obtained simply by checking pd.isna(x), but "
"checking if x is None before checking pd.isna(x) improves performance on "
"DataFrames containing many None values, since checking pd.isna(x) is slower "
"than checking if x is None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:79
#: d3a9859bfac84e72844a5215733ba952
msgid "Anything"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:81
#: 6a793cd9218b4ae58028622beb2a9997
msgid "`False` if pd.isna(x), `True` otherwise"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:87
#: 9cec71dfe9cd46bbb5f0e0b0acf6db57
msgid ""
"Filters the input pandas Series to keep only distinct non null values and "
"returns the result as a python ``list``."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:90
#: edbeb79c4f3149ca9e52d7c63cf0d783
msgid "pandas ``Series``"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:93
#: c2c823980652445c9913daa5b9550e82
msgid "list of distinct non null values in row"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:99
#: 933309e0124643bba99fbb0eb7ddbc5a
msgid ""
"For each row in the input DataFrame, the distinct and non null values "
"contained in the columns input_col_names are stored in a list. A pandas "
"Series of the same length as the input DataFrame is then constructed with "
"these lists as values."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:103
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:181
#: 0b8a4575e2ff491592795a10be89edf1 390632b1ab594c38944f71c411a64560
msgid "input DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:105
#: 12850dcdd35643bcb0e858be204ed213
msgid "the names of the columns to use"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:108
#: 3b280bbd956041c38b4897cc197f77e5
msgid "resulting Series"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:114
#: 80c2ebf0ae204e1ebf588c6ba89dd6fc
msgid ""
"Combines the input DataFrame's columns into one by taking the non null value"
" in each row, in the order of the DataFrame's columns from left to right."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:117
#: 12c54a551fab430c964c8bbf9a7da059
msgid "Returns a pandas Series with the combined results."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:119
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:135
#: ce9a522bb1e541e58370b2590fd6c0fb d4e59330e08645dd9c9a553be7ce3918
msgid "input pandas DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:122
#: 7f839f76f5414b6ebe7dfa820fd2d853
msgid ""
"Series containing the first non null value in each row of the DataFrame, "
"taken in order of the DataFrame's columns from left to right."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:129
#: 31c25baf7877413aaf54da08bb69c996
msgid ""
"Returns a Series with the same index as the input DataFrame, whose values "
"are the name of the first column (or the corresponding label, if provided) "
"with a non-null value in each row, from left to right."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:133
#: da649c6fa2ad4f9cb94867895b95f3cc
msgid "Rows with all null values return None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:137
#: 39952aecf93a4d0babfd5d340efe7d1a
msgid ""
"if provided, must be a mapping of column names to the corresponding labels "
"in the result."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:141
#: c665099078e846d7b0bbd646ac2e67ef
msgid ""
"Series containing the name of the first column with a non-null value in each"
" row of the DataFrame, from left to right"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:150
#: 8444652bf02f41eebb9d6014d21f3922
msgid "a dictionary"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:153
#: 03a6bde9bb55449888f969dfc7e7ade8
msgid "the input dictionary, with all `None` removed."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:170
#: 3d8db3c681d34b27a70dbedeb3d42441
msgid ""
"Converts a pandas DataFrame into a Series with the same index as the input "
"DataFrame and whose values are dictionaries like :"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:183
#: 7a564d566a364594a58126188e664ea4
msgid "optionnal, name of result Series"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:185
#: 5b626b4d5a714c06b648ab7beaee3c29
msgid ""
"if set to ``True``, ``null`` values are recursively removed from the "
"dictionaries"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:189
#: c85e662eafef4e8e899d80d0dc53ddcd
msgid "pandas Series"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:195
#: f2dedd98dbef4c0787dbf16d581710b3
msgid ""
"Converts a pandas DataFrame or Series containing `str`, `int` or `float` "
"values, possibly including null (`None` and `np.nan`) values to a DataFrame "
"with False, True and `np.nan` values respectively."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:199
#: fc06fcdb898944b8b0cfaf64febb082f
msgid ""
"Values 1, 1.0, \"1\", any non zero number... is converted to `True`. Values "
"0, 0.0, \"0\" are converted to `False`. Values `None` and `np.nan` are "
"converted to `np.nan`."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:203
#: ed556cb128e449aab9730179ac7f0004
msgid ""
"Useful to convert boolean data extracted from Oracle databases, since Oracle"
" does not have a boolean data type and boolean data is often stored as "
"\"0\"s and \"1\"s, or to handle sitations in which pandas data structures "
"should contain nullable boolean data (in pandas / numpy, the `bool` dtype is"
" not nullable, and this can be tricky to handle)."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:212
#: d03b9c90ee2a4e7fbdec6be16ec420d7
msgid ""
"Converts a python `list`, `set` or `numpy.ndarray` to a string with "
"Postgresql array syntax."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:215
#: b16c671e65514a30a1c6788ef7370455
msgid ""
"Elements of the list-like input argument are converted to `string` type, "
"then stripped of leading and trailing blank spaces, and finally filtered to "
"keep only non empty strings."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:219
#: e6d6036b0482487da4f7113271d073b9
msgid ""
"This transformation is required on the elements of a DataFrame's columns "
"that contain collections before bulk inserting the DataFrame into Postgresql"
" with the psql_insert_copy method."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:223
#: 5f098a77ead643f0bd6b14c9ff64a98c
msgid "iterable to serialize as Postgres array"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:225
#: f44d713775704305af13325ff6ddd371
msgid ""
"if ``True``, returns ``value_on_error`` instead of raising ``ValueError`` "
"when the input is of an unexpected type"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:228
#: 9a2498584a354f31bc5bbc6f3a5e17ea
msgid "value to return on errors, if ``handle_errors`` is ``True``"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:232
#: 0bcc6a4c03d547488f10a733d8389f0a
msgid "string with Postgresql Array compatible syntax"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:0
#: 5aadc9f3737f447d91333c38a9723059
msgid "Raises"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:235
#: ff9ba9c2feeb43758eaa0ab7f5027c8b
msgid "when ``handle_errors`` is False and ``x`` is not list-like."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:250
#: 41d58bef8c33477a92fe43896dd7f9e7
msgid ""
"Returns a `pandas.DataFrame` with all values serialized as strings with "
"Postgresql array syntax. All values must be of type list, set or numpy "
"array. Other values raise errors, which may be handled if handle_errors is "
"set to True."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:254
#: 7ccd922835f24d3d8b15b59adf9e75e2
msgid "See `to_pgarr` for details on error handling."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:256
#: 7c684d25da57486a859b3684da4f774f
msgid ""
"This is required before bulk loading a pandas.DataFrame into a Postgresql "
"table with the psql_insert_copy method."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:260
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:293
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:381
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:383
#: 14fa2eaf36c94db2bcf3c387df3721c2 d3dced6352234f538f6685f5cb812e5a
#: 7b8ed15afe9648f0b093480d9ed892df 494add6846f940aa966edcb0763f70d1
msgid "pandas DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:263
#: 61d751f496644f269c3522a64792dffb
msgid ""
"pandas DataFrame with the same shape and index, all values serialized as "
"strings with Postgresql array syntax."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:270
#: 250819670ce8455ba92ef2c3725f1864
msgid "Examples :"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:288
#: 5b5ef91f43494ac2ad23cab31dae8cec
msgid ""
"This is required before bulk loading into a Postgresql table with the "
"psql_insert_copy method."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:291
#: a36b71c16c3a4696977cb1f01aaced51
msgid "See `to_json` function for details."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:296
#: bd84f904d1724003a1996ded6655df25
msgid ""
"pandas DataFrame with the same shape and index, all values serialized as "
"json strings."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:303
#: a89db08dc231450f8cbb888177d44ce5
msgid ""
"Serializes the values of a DataFrame that contains numbers that represent "
"possibly null (np.nan or None) integers. This is useful to prepare data "
"before loading to integer Postgres columns, as pandas automatically converts"
" integer Series to float dtype if they contain nulls."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:308
#: 14430052471d41cf81be127e96554d26
msgid "DataFrame of integer, possibly with None and np.nan values"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:311
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:324
#: 8ecbd1e73df4414599424f5c30913a8e 83a623fe9ade4d04bee998fcf2303e36
msgid "same DataFrame converted to string dtype"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:317
#: bf15bdb641cd4e4cb1ae7ee57d28de13
msgid ""
"Serializes the values of a DataFrame that contains `timedelta` values. This "
"is useful to prepare data before loading to `interval` Postgres columns, as "
"sqlachemy does not support the timedelta dtype."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:321
#: c52fd137fd6d42988bf443d92d048eb2
msgid "DataFrame of timedeltas"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:330
#: 2d710d8cb9524f7c98ee5a366aba6d2a
msgid ""
"Removes rows from the input DataFrame `df` in which the column "
"`df_column_name` contains values that are already present in the column "
"`table_column_name` of the table `table`, and returns the filtered "
"DataFrame."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:340
#: 3dae735f8cbe4b1da965ecdb5272ecdc
msgid ""
"Join two pandas DataFrames, attempting to match rows on several keys by "
"decreasing order of priority."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:343
#: 97914f92063c4fe8b80a8b09b76bdfce
msgid ""
"Joins are performed successively with each of the keys listed in "
"`or_join_keys`, and results are then concatenated to form the final result. "
"This is different from joining on a composite key where all keys must match "
"simultaneously : here, rows of left and right DataFrames are joined if at "
"least one of the keys match."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:348
#: 1daa3b55dfd0455e97ae57d6af49777b
msgid ""
"Joins are performed on the keys listed in `or_join_keys` by \"decreasing "
"order of priority\" in the sense that, in order to be matched, rows of left "
"and right MUST match on their highest priority non null key (which come "
"first in the list) but MIGHT not match on lower priority keys (which come "
"later in the list)."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:353
#: 030267370b8d4f26aafa1085621f7f12
msgid ""
"During each of the joins on the individual keys, non-joining key pairs and, "
"if any, columns common to both left and right DataFrames, are coalesced "
"(from left to right) if `coalesce_common_columns` is `True` (the default)."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:357
#: 1a74d141539f42a1b06adde0e2d1c8e9
msgid ""
"Optionally, the join condition can contain an additional equality clause on "
"keys listed in `and_join_keys`."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:360
#: 8835c089735045dfab286e14a1a8fecf
msgid ""
"If `or_join_keys` is `['A', 'B']` and `and_join_keys` is `['C', 'D']`, the "
"SQL equivalent of the join condition is :"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:385
#: 95669e8aed894e18a451d9ed2bfeaf92
msgid "list of column names to use as join keys"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:387
#: c3f8e0f4aad54554a1371fcf8255f9e2
msgid "'inner', 'left', 'right' or 'outer'. Defaults to 'inner'."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:389
#: 212d18f7ec664026857ebf0ed6dcf3de
msgid "list of column names to use as additional join keys"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:392
#: acf5fb56c4244701a641c3923b1263a2
msgid ""
"whether to coalesce values in the columns that are present in both "
"DataFrames. Defaults to `True`."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:396
#: 9a57b198026a416ea48e8dee2537f2c5
msgid "result of join operation"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:402
#: 47755e36ca6e4ad79dec771e910f145c
msgid ""
"Performs an operation similar to `pandas.DataFrame.isin` on multiple "
"columns, with the differences that :"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:405
#: d010781ddc3349ae873d69c4c5565a49
msgid ""
"the columns are tested one by one (instead of being tested simultaneously as"
" in the case of `pandas.DataFrame.isin`), the first column of `left` being "
"tested against the first column of `right`, the second column of `left` "
"being tested against the second column of `right`..."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:409
#: f3e4e2ed763345f7b24ccaa4040deb22
msgid ""
"columns are considered to be sorted by decreasing priority, meaning that a "
"match on 2 rows of `left` and `right` on a given column will be taken into "
"account only if the columns of higher priority on those 2 rows have values "
"that are either equal or null."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:414
#: 8872d52f234849e795db9bbd78daa222
msgid ""
"Takes two DataFrames `left` and `right` with the same columns, returns a "
"Series with the same index as the `left` DataFrame and whose values are :"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:417
#: 7d50205eb1a64128a3d01afa7af7f2f8
msgid ""
"`True` if the corresponding row in `left` has a match in `right` in at least"
" one column"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:419
#: bc994e09e785453d93a2a0c8e51ea1cf
msgid "`False` if the corresponding row in `left` has no match in `right`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:421
#: 50f3dd8d9fda45b798eb61964dff9d2c
msgid ""
"This is typically useful to filter vessels' data based on some other "
"vessels' data, both datasets being index with multiple identifiers (cfr, "
"ircs, external immat...)."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:424
#: 50b95a8612d54697b7ece12cc0e3ae34
msgid "DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:426
#: e9ecc46627b64c6d8c95c37de73adf12
msgid "DataFrame with values for which to test if they are present in `left`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:430
#: a9475c59c28f4945a44cca8ca22aa4cf
msgid "list of booleans with the same length as `left`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:436
#: 2575e24a3e924b02a0567e7d85915d58
msgid ""
"Similar to `pandas.DataFrame.drop_duplicates(subset=subset)`, with the "
"differences that:"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:439
#: 56b2f5111f5542eb8dc67acef6e1b829
msgid ""
"the rows are deduplicated based on their values in the columns in `subset` "
"one after the other and by decreasing priority, and not simultaneously"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:441
#: 3cf0bcf4cea64260af71401737e5f1c0
msgid "`NA` values on a key are not considered"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:443
#: c0bfecff5ddd41bd9e1851e074a5140d
msgid "Rows having all `NA` values in all columns of `subset` are dropped."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:445
#: f5507d5ac7224d49a964cdf6268732bf
msgid ""
"What is meant by \"by decreasing priority\" is that keys in `subset` are "
"considered to be sorted by decreasing level of priority (for instance `A` "
"and `B`, with `A` having the highest level of priority), and rows with "
"distinct values on `B` but identical values on `A` will be considered "
"duplicated, whereas rows with distinct values on `A` and identical values on"
" `B` will not be considered duplicates. Hence, the first key in `subset` "
"entirely determines whether rows are duplicates or not on all rows with non "
"null `A`, and subsequent keys in `subset` only come into play on rows where "
"`A` is null."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:454
#: 008b44526ac74ff9859f9f51c699be25
msgid ""
"This is typically useful to deduplicate data containing one row per vessel "
"with potential duplicates but with multiple identifier columns (cfr, "
"external immatriculation, ircs), some identifiers being more reliable than "
"others. For instance, if two rows have the same CFR but different external "
"immatriculation, it is reasonable to assume that it is a one the same "
"vessel, whereas two rows wihout any information on CFR and different "
"external immats should be considered as two distinct vessels."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:462
#: 161b762ec5df4e6293d2c510cfbcc6ee
msgid "Input DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:464
#: c7bf6e6ed75c41b89424b1b4dfaf8544
msgid ""
"List of column names to use as keys for the `drop_duplicates` operation, by "
"decreasing level of priority"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:468
#: 0d8fdade29144beb89abc1db9c7defaf
msgid "Copy of the input DataFrame with duplicate rows removed."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:477
#: 0c57234b1dde43baab4dbd45d2323b58
msgid ""
"Tests whether each row of an input 2D array is the last of a sequence of "
"`window_length` consecutive rows equal to a given `row` 1D array, and "
"returns the result as a float array with the same length as the input array."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:481
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:541
#: 4305e434d7bf43af9ffa66b3d36a5c72 46e972e8c3f244b19230b34639758a49
msgid ""
"The output array is of `float` dtype and not `bool` dtype, because numpy "
"`bool` arrays cannot contain null values. The values are `0.0` (representing"
" `False`), `1.0` (representing `True`) and `np.nan` representing nulls."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:485
#: 177628ed3ba5495aa4cb49c6c9c13b0a
msgid ""
"The first (`window_length` - 1) rows evaluate to `np.nan`, since the sliding"
" window would need to know the values of the previous rows which are not "
"given."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:488
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:549
#: c08f2f19244f4a1abf76f3d540bbec5e f783ab20d9de481fa3bee928a2ed4daf
msgid "2D numpy array"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:490
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:551
#: 844d842925704f1cb438814b647624f6 537df39f143c4f7dae04bc709327028b
msgid "1D numpy array with the same length as the number of columns in `arr`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:493
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:554
#: aa3317c62c6b4605b1cc9d22d2e50884 fc2f68b3240344eebf68d1b77790bec4
msgid ""
"number of consecutive rows that must be equal to `row` for the result to be "
"`True`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:497
#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:558
#: c6f7db8810c349e1b435d1083f9d9536 eab061b1f6c7420993c5d636efccb467
msgid "1D boolean array of the same length as the input arrays"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:516
#: 2cf21362120e4ca39862e1d3946a85fd
msgid ""
"Given a 1D array with values `0.0`, `1.0` and `np.nan`, propagates `1.0` "
"backward `steps` times."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:519
#: f3d5c7b04cd840628b76d319855a648b
msgid "array containing `0.0`, `1.0` and `np.nan` values"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:521
#: a70ad07adcf5409fad0e08efc4c6214d
msgid "number of steps that ones should be back-propagated"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:524
#: 9795f3a66aba456695541b6e3eb07450
msgid ""
"1D array with the same dimensions as input, with ones back-propagated "
"`steps` times."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:537
#: 1a491d8fc9224bd4ab08d2c9011116b9
msgid ""
"Tests whether each row of an input 2D array belongs to a sequence of "
"`window_length` consecutive rows equal to a given `row` 1D array, and "
"returns the result as a float array with the same length as the input array."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:545
#: f1e3440eb1dc4b9597897f70443572f5
msgid ""
"The first and last (`window_length` - 1) rows may be `np.nan`, since the "
"rows before the beginning and after the end of the array are not known and "
"might be needed to determine the result."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:589
#: 42f0c7b1c7a4460286e0f8b9f281521b
msgid ""
"Matches the input `str` with the input `Pattern` and returns a pandas "
"`Series` with the matched data."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:592
#: 9702c4241fac4da6842a50296476f557
msgid ""
"The index labels of the result `Series` are the group names "
"`(?<group_name>...)` of the pattern."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:595
#: b858dfc1513a4b65b44b5a0b74e17dfa
msgid "The values of the result `Series` are:"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:597
#: 3de449f00f8945a4bcf66d860be1ec09
msgid "the match's group values, if the string matches the pattern"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:598
#: 972627190e644c4296293beda082ef1d
msgid "`None`, if the string does not matches the pattern"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:600
#: ad1e30fc49324dd5badb24b77c256676
msgid "string to match"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:602
#: 6d549c6476df4811ace63df8b083fd68
msgid "pattern against which to match the string"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/processing/index.rst:605
#: b6840526db124ec69e00c0bec16e7f54
msgid "the match's group data"
msgstr ""
