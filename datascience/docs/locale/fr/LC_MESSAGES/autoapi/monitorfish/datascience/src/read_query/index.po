# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Vincent Chéry
# This file is distributed under the same license as the Monitorfish package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Monitorfish\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 17:20+0100\n"
"PO-Revision-Date: 2022-11-16 16:45+0000\n"
"Language-Team: French (https://www.transifex.com/ministere-de-la-transition-ecologique-et-solidaire-1/teams/124045/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:2
#: 5f793659d99a4194b698d59be31f67eb
msgid ":py:mod:`monitorfish.datascience.src.read_query`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:8
#: 308f089052d54b69a0552bab6ef9e07f
msgid "Module Contents"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:12
#: aee67cef3f984b91a26bef9a8a7e7e23
msgid "Functions"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:21:<autosummary>:1
#: c5dc9c95e26f4d65acfadc69f2730638
msgid ""
":py:obj:`read_saved_query "
"<monitorfish.datascience.src.read_query.read_saved_query>`\\ \\(db\\: str\\,"
" sql\\_filepath\\: Union\\[str\\, pathlib.Path\\]\\, parse\\_dates\\: "
"Union\\[list\\, dict\\, None\\] \\= None\\, params\\: Union\\[None\\, "
"dict\\] \\= None\\, backend\\: str \\= \\'pandas\\'\\, geom\\_col\\: str \\="
" \\'geom\\'\\, crs\\: Union\\[int\\, None\\] \\= None\\, \\*\\*kwargs\\) → "
"pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:21:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:24
#: ae7bc512959046459a635db098eacd6c a3ba157be3864974b6966a530e4b55c0
msgid "Run saved SQLquery on a database. Supported databases :"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:21:<autosummary>:1
#: f49c56b53bc1430e8ef28fff4bf8c5f2
msgid ""
":py:obj:`read_query <monitorfish.datascience.src.read_query.read_query>`\\ "
"\\(db\\: str\\, query\\, chunksize\\: Union\\[None\\, str\\] \\= None\\, "
"params\\: Union\\[dict\\, None\\] \\= None\\, backend\\: str \\= "
"\\'pandas\\'\\, geom\\_col\\: str \\= \\'geom\\'\\, crs\\: Union\\[int\\, "
"None\\] \\= None\\, \\*\\*kwargs\\) → Union\\[pandas.DataFrame\\, "
"geopandas.GeoDataFrame\\]"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:21:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:74
#: 012a74d081ca4881bf519a433899c6e7 88146c29132c48ea9f69deb7af22bfc3
msgid "Run SQLquery on a database. Supported databases :"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:21:<autosummary>:1
#: 974a707ed08341e0aeb351479afe8d20
msgid ""
":py:obj:`read_table <monitorfish.datascience.src.read_query.read_table>`\\ "
"\\(db\\: str\\, schema\\: str\\, table\\_name\\: str\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:21:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:117
#: 894950fd95b249bab912a4c304f8193a 54be3c31edb8460f8840d588583d6311
msgid "Loads database table into pandas Dataframe. Supported databases :"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:26
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:76
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:119
#: 7bf273d919ac4329bd7e0f9069b09d4a 600bfa81bc454aac94a5b8c35034a50d
#: 5ddd4ab60b394f459e13d363021ef69a
msgid "'ocan' : OCAN database"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:27
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:77
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:120
#: 6e7d6526d759432893bebce92ae58c95 e208cf93615244bab0257471bc1c5e7f
#: d3d3a24fb018402aa0c4f45cecbd4522
msgid "'fmc': FMC database"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:28
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:78
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:121
#: 5e2fe75dd10b40dfb7affced24e8020e f6188b138dd84dceaefc22cc20a2c73f
#: e91bfffbc93549a1b7b002dcb0139e79
msgid "'monitorfish_remote': Monitorfish database"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:29
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:79
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:122
#: 53198cf80c4b400d9dfc58cbf078a777 f48701451e9544a8b166dcb5a718542f
#: f8ae0106db6a4888a2a153e3ec4460ac
msgid "'monitorfish_local': Monitorfish PostGIS database hosted in CNSP"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:30
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:80
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:123
#: 3af1ddfa0d9b4c19a98d6d6907eee3d6 c46f3dd03c6a46f693f3eee1d74715ae
#: 5e33c606eafb48e5b9692b9d34e7160d
msgid "'cacem_local' : CACEM PostGIS database hosted in CNSP"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:32
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:82
#: 90ed64067bc34f0abe178c6c4d210751 ec8bd6925db94b01bb2b91a66871cca9
msgid "Database credentials must be present in the environement."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:0
#: a211812a1f7f44748a2742a6a7457797 0b1881027abd43baac71034cdf488549
#: c276987c79fa4fa2b1b0579746b70045
msgid "Parameters"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:34
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:84
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:125
#: 9f757194eadf455aaee7dca216bc09f1 157ce01d2e5440969ebaae4de8cd2f5b
#: cb777b21d0e84c3b813fd7a588a7f1b5
msgid ""
"Database name. Possible values : 'ocan', 'fmc', 'monitorfish_remote', "
"'monitorfish_local'"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:37
#: abb345222949465f943a4feff38f9503
msgid ""
"path to .sql file, starting from the saved queries folder. example : "
"'ocan/nav_fr_peche.sql'"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:40
#: 113299e343ce4bdab0725bf4c724403f
msgid ""
"- List of column names to parse as dates. - Dict of ``{column_name: format "
"string}`` where format string is   strftime compatible in case of parsing "
"string times or is one of   (D, s, ns, ms, us) in case of parsing integer "
"timestamps. - Dict of ``{column_name: arg dict}``, where the arg dict "
"corresponds   to the keyword arguments of :func:`pandas.to_datetime`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:41
#: 0c5bd38e3a17450dabce3e3b4f3635d3
msgid "List of column names to parse as dates."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:42
#: bc07281024dc4d01be7474cfc34ab33f
msgid ""
"Dict of ``{column_name: format string}`` where format string is strftime "
"compatible in case of parsing string times or is one of (D, s, ns, ms, us) "
"in case of parsing integer timestamps."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:45
#: 3ac7438924ca4848a282b639ba4d43fe
msgid ""
"Dict of ``{column_name: arg dict}``, where the arg dict corresponds to the "
"keyword arguments of :func:`pandas.to_datetime`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:48
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:93
#: 90ad223271924b2f8e011bf023eda669 74da8138114a4df4bbaba014b0d3ce92
msgid "Parameters to pass to execute method. Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:51
#: efc06e800749469b977e07a13d8aa740
msgid ""
"- 'pandas' to run a SQL query and return a `pandas.DataFrame` - 'geopandas' "
"to run a PostGIS query and return a `geopandas.GeoDataFrame`.  Defaults to "
"'pandas'."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:52
#: 629b94dd48b34bf1abfff7a402588508
msgid "'pandas' to run a SQL query and return a `pandas.DataFrame`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:53
#: a5e783babe48460ca4aa64c8045f3c57
msgid ""
"'geopandas' to run a PostGIS query and return a `geopandas.GeoDataFrame`."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:55
#: d522cd468f9443419405f24916d9e499
msgid "Defaults to 'pandas'."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:57
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:100
#: 3788e709803a4065aac927f09010ceda 29b7e7ad5aa4430b9b3f07c50649ddd1
msgid ""
"column name to convert to shapely geometries when `backend` is 'geopandas'. "
"Ignored when `backend` is 'pandas'. Defaults to 'geom'."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:61
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:104
#: d925b1ac606846718a47b7e4c055c97f b0b41498d577432caaaf29d1e65cc9cf
msgid ""
"CRS to use for the returned GeoDataFrame; if not set, tries to determine CRS"
" from the SRID associated with the first geometry in the database, and "
"assigns that to all geometries. Ignored when `backend` is 'pandas'. Defaults"
" to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:66
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:109
#: 7c9c12db23814c32aa10210425ab4223 50615c259b9946d19a165c4217df2c91
msgid "passed to pd.read_sql or gpd.read_postgis"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:0
#: 133b90610e544b9882572f62c34d1332 9684c120079342bf92dae1d46d36fc64
#: 1510944c33e54c97b5c1ab93731c07b5
msgid "Returns"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:68
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:111
#: 98a1b04a0c0545f494d397cddddfdeed 708a203c9622442990f10453a6006857
msgid "Query results"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:0
#: 08d0ab0067e44442919c9ba0f299125b 2c56c128dd55470387cc03cc6f66e1fa
#: d5e2909788714bc69a53e73bc5a70161
msgid "Return type"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:87
#: 28b928ed2b2e47d8af3d7b7e5fde1cca
msgid "Query string or SQLAlchemy Selectable"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:89
#: 831f2a3548e641e99c7016ced78a23bc
msgid ""
"If specified, return an iterator where `chunksize` is the number of rows to "
"include in each chunk. Defaults to None."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:96
#: 5e5837e7b493489fbc048d7311c8121c
msgid ""
"'pandas' to run a SQL query and return a `pandas.DataFrame` or 'geopandas' "
"to run a PostGIS query and return a `geopandas.GeoDataFrame`. Defaults to "
"'pandas'."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:128
#: d782ff1965714b379d2f720d651d3d89
msgid "Schema name"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:130
#: c727125ea85142afa6917cfb38a7f780
msgid "Table name"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/read_query/index.rst:133
#: 86cc70f7c142489f8edf899447e7712c
msgid "Dataframe containing the entire table"
msgstr ""
