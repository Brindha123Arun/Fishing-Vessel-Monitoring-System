# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Vincent Chéry
# This file is distributed under the same license as the Monitorfish package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Monitorfish\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 17:20+0100\n"
"PO-Revision-Date: 2022-11-16 16:47+0000\n"
"Language-Team: French (https://www.transifex.com/ministere-de-la-transition-ecologique-et-solidaire-1/teams/124045/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:2
#: eabf2fcb23b64c00a7f8bf41748ea885
msgid ":py:mod:`monitorfish.datascience.src.pipeline.flows.anchorages`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:8
#: 85e2cf1c3fb94dd091eb884ce69eb68a
msgid "Module Contents"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:11
#: c1d2273398074caba747f95d8c25adef
msgid "Classes"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:19:<autosummary>:1
#: 76397f8c3fef49b38c4d414f60dcfe98
msgid ""
":py:obj:`PortLocation "
"<monitorfish.datascience.src.pipeline.flows.anchorages.PortLocation>`\\"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:19:<autosummary>:1
#: 5051c0c1a6434f6c932ca4595645b7e4
msgid ""
":py:obj:`PortsVPTree "
"<monitorfish.datascience.src.pipeline.flows.anchorages.PortsVPTree>`\\"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:19:<autosummary>:1
#: 0e93dd772ec64e5d901f667b56cfb655
msgid "Vantage Point Tree to efficiently find the nearest port from a given"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:21
#: 7fa6ce0858064374b82d14512c970284
msgid "Functions"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: dc520ea9e53a4b299467b2e3de4ed25c
msgid ""
":py:obj:`extract_ports "
"<monitorfish.datascience.src.pipeline.flows.anchorages.extract_ports>`\\ "
"\\(\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: d327a05f2ca647fbb262953c5e23cbe9
msgid ""
"Extracts ports locode, name, latitude and longitude from processed.ports. "
"This"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: ebd0ef7e324d4df6a5fc10d749520d1b
msgid ""
":py:obj:`extract_control_ports_locodes "
"<monitorfish.datascience.src.pipeline.flows.anchorages.extract_control_ports_locodes>`\\"
" \\(\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 9dd57c9e51c349aeac119c6d468c1479
msgid "Returns the set of distinct port locodes where at least one control"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 82952a020dfe4fa6a86451e3f9400d01
msgid ""
":py:obj:`extract_ers_ports_locodes "
"<monitorfish.datascience.src.pipeline.flows.anchorages.extract_ers_ports_locodes>`\\"
" \\(\\) → Set\\[str\\]"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 393c711d61d943c8ae894cde0adb0687
msgid "Returns the set of distinct port locodes used at least once in an ERS"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: e70cf9a2c60346c9b26e9c7143a5755b
msgid ""
":py:obj:`extract_ais_anchorage_coordinates "
"<monitorfish.datascience.src.pipeline.flows.anchorages.extract_ais_anchorage_coordinates>`\\"
" \\(\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 86fffd7f16f543af8857bcd489e846db
msgid "Returns a DataFrame with latitude, longitude columns corresponding to"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: e993111ec31b4167b4a963c02b88fca9
msgid ""
":py:obj:`extract_vms_static_positions "
"<monitorfish.datascience.src.pipeline.flows.anchorages.extract_vms_static_positions>`\\"
" \\(parquet\\_file\\_relative\\_path\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:142
#: 8f23ea0fe015464caaff790c8bc73171 0faeb5ae9fa04a2bad09f56b56e163b5
msgid "Read local file with vms positions that have speed zero."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 43d4f74289c84b9ba6540dea694ff32b
msgid ""
":py:obj:`extract_manual_anchorages_coordinates "
"<monitorfish.datascience.src.pipeline.flows.anchorages.extract_manual_anchorages_coordinates>`\\"
" \\(\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: c8f282091c5f4ceab4e65838d9bc3898
msgid ""
":py:obj:`get_anchorage_h3_cells "
"<monitorfish.datascience.src.pipeline.flows.anchorages.get_anchorage_h3_cells>`\\"
" \\(static\\_positions\\: pandas.DataFrame\\, h3\\_resolution\\: int \\= "
"9\\, number\\_signals\\_threshold\\: int \\= 100\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 90ae0f6740b740ac8945a0faa03c5be1
msgid ""
"Bins input positions into h3 cells of the given resolutions and filters said"
" h3"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 1f040703a3e74c799d51c2d7ae03c4a7
msgid ""
":py:obj:`get_anchorage_h3_cells_rings "
"<monitorfish.datascience.src.pipeline.flows.anchorages.get_anchorage_h3_cells_rings>`\\"
" \\(ais\\_anchorage\\_h3\\_cells\\: Set\\[str\\]\\, "
"vms\\_anchorage\\_h3\\_cells\\: Set\\[str\\]\\, "
"manual\\_anchorage\\_h3\\_cells\\: Set\\[str\\]\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 9bcac4373333477c80f3e41a6d0af40b
msgid ""
"Unites two sets of h3 cells corresponding to anchorage locations of vessels"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 4c527fe4f1684c10a7b4360f169a851d
msgid ""
":py:obj:`get_ports_locations "
"<monitorfish.datascience.src.pipeline.flows.anchorages.get_ports_locations>`\\"
" \\(ports\\: pandas.DataFrame\\) → List\\[PortLocation\\]"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:190
#: 10c999c2fca94d4f80b32b2f0a0e9fb2 00185de1901244579babe2fefa3a45b2
msgid "Transforms a DataFrame into a list of PortLocation objects."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 54fa776a5ec946eca29a24e5965e3d84
msgid ""
":py:obj:`get_anchorages_closest_port "
"<monitorfish.datascience.src.pipeline.flows.anchorages.get_anchorages_closest_port>`\\"
" \\(anchorage\\_h3\\_cells\\_rings\\: pandas.DataFrame\\, "
"ports\\_locations\\: List\\[PortLocation\\]\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 3aa24c27d6b84bf09da056e17b001f73
msgid ""
":py:obj:`unite_ports_locodes "
"<monitorfish.datascience.src.pipeline.flows.anchorages.unite_ports_locodes>`\\"
" \\(ers\\_ports\\_locode\\: Set\\[str\\]\\, control\\_ports\\_locodes\\: "
"Set\\[str\\]\\) → Set\\[str\\]"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:204
#: 689f74e8ed8c439293031e348a02b833 ab53e23923224da484a2c87eab608ce5
msgid "Unites sets of port locodes."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 2b9d9ceb4f0f47ecb611924fbf21ecba
msgid ""
":py:obj:`get_active_ports "
"<monitorfish.datascience.src.pipeline.flows.anchorages.get_active_ports>`\\ "
"\\(ports\\: pandas.DataFrame\\, active\\_ports\\_locodes\\: Set\\[str\\]\\) "
"→ pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: cfa755052ded4219a8484d864dd9ab20
msgid ""
":py:obj:`merge_closest_port_closest_active_port "
"<monitorfish.datascience.src.pipeline.flows.anchorages.merge_closest_port_closest_active_port>`\\"
" \\(anchorages\\_closest\\_port\\: pandas.DataFrame\\, "
"anchorages\\_closest\\_active\\_port\\: pandas.DataFrame\\) → "
"pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:220
#: ce476b77d2ce4772983a764908cf9a69 bc5ffb2ab6b44b8faf38e7383c612b3f
msgid "Merges anchorages closest port and closest active port."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: bf2e31784db5453ca503ec9e4a01d5a5
msgid ""
":py:obj:`load_processed_anchorages "
"<monitorfish.datascience.src.pipeline.flows.anchorages.load_processed_anchorages>`\\"
" \\(anchorages\\: pandas.DataFrame\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:225
#: f0ef9c631d564de681338d340a4028ba b5a0b549006047ed86e1ef64d2cbfc51
msgid "Load anchorages to processed.anchorages"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: 6c6414b8da184ecf9544039112925573
msgid ""
":py:obj:`extract_datagouv_anchorages "
"<monitorfish.datascience.src.pipeline.flows.anchorages.extract_datagouv_anchorages>`\\"
" \\(anchorages\\_url\\: str\\, proxies\\: dict\\) → pandas.DataFrame"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:235
#: 147c263cdb8747edb96befb0545b99b4 cbf61f5aff654d27b8b6f4abdf3da531
msgid ""
"Downloads anchorages csv file, returns the result as a pandas DataFrame."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: f6d93bb86ad745129c4c2c3caf72a6b4
msgid ""
":py:obj:`load_anchorages_to_monitorfish "
"<monitorfish.datascience.src.pipeline.flows.anchorages.load_anchorages_to_monitorfish>`\\"
" \\(anchorages\\: pandas.DataFrame\\)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:43:<autosummary>:1
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:249
#: 8ab1e08c54a644fca190bf154c35d96e 8241065de99a422080b15ab9605c8d89
msgid "Loads anchorages data to monitorfish database."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:45
#: ce7116a5015548afa627608ba146d2f9
msgid "Attributes"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:53:<autosummary>:1
#: d3bd7d64a4104d498d6bc75fbbfb3dc1
msgid ""
":py:obj:`h3_resolution "
"<monitorfish.datascience.src.pipeline.flows.anchorages.h3_resolution>`\\"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:53:<autosummary>:1
#: 8eece504bb074025aa84ff65c807d8ec
msgid ""
":py:obj:`anchorages "
"<monitorfish.datascience.src.pipeline.flows.anchorages.anchorages>`\\"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:53:<autosummary>:1
#: 83cd8cb2c4504de0864901dc3d68ef94
msgid ""
":py:obj:`file_name "
"<monitorfish.datascience.src.pipeline.flows.anchorages.file_name>`\\"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:79
#: f012d82f4b894248b5f46a06a0ec60ff
msgid "Bases: :py:obj:`vptree.VPTree`"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:81
#: ab56c35a666948f9a5b5806288c1e2f1
msgid ""
"Vantage Point Tree to efficiently find the nearest port from a given "
"Position(lat, lon)."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:84
#: 0ede654a11f64f0bb4c0e2b46df2ed42
msgid ""
"If there are p ports in the tree, searching for the port that is closest to "
"a given Position has complexity log(p)."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:89
#: ecf441751e394d018851fbeea98b612d
msgid ""
"Returns the distance (in meters) and locode of the PortLocation that is "
"closest to the input Position."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: 6bcbb71c81b44e5d8ce1d45f85148242 bb4914972616470a917762883eff74aa
#: c051c8bd640e450aa5d579aa885a7e5b d1ea89de91b84f74a09efdd60212f86e
#: 6360b1a446434447abd15cb7048fc71c 8137296fa27848739b3074cf2f54f2bf
#: 9b369e5a9d0747309c08e6f4dcbea20a
msgid "Parameters"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:92
#: ee30fe1df8bf4517aa97769649d8f300
msgid "Position instance"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: fe3512005eee4bac8bfa1b6abedc10d5 60ecd0ead57a445889bf935eb6f2c035
#: 48c24ee054a24636a4fd2963527ba106 eda8fcee3fe449c29538d6cb903a958d
#: 1e490bb711c14d25b065baf51f104204 70df28f4367f40fb9686c18ed252e23d
#: 3ef6f132caa8411ea3078dd6020c5ad9 369531086e7c4f9e913509fa0e5cafdc
#: 0f3cdf933fc14e62b9e94274ef2f90f3
msgid "Returns"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:95
#: adb6dfd8bb8d4f6aae2c2ec770cf3b39
msgid "dict with nearest_port_distance and   nearest_port_locode keys."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:97
#: bada0ed8c652466ea8ea27fe27639396
msgid "dict with nearest_port_distance and"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:98
#: cb23f11d46c64babb0d49291e64600b4
msgid "nearest_port_locode keys."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:0
#: 98a134bc31944c8a83880435b38a2555 aa824a27c0b04c63a79546b3dc0b490b
#: 47a7c541411d4b8b8ad7284736cab502 c00bf76497474a05864fd0a907fd71b0
#: ef9806907a1b473ba060a1e8333aa538 4e326a17412b47dbac4dc5072c026bbd
#: 992ab68b2905407885440107de962df2 43070dd12797453f9ff85d87e62df02e
msgid "Return type"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:105
#: 0293d94240004f319d41bd122343fd27
msgid ""
"Extracts ports locode, name, latitude and longitude from processed.ports. "
"This table therefore needs to be filled before using this function."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:108
#: a8e73fe951a74b3d89c615ca3e533acb
msgid ""
"DataFrame of ports with locode, port_name, longitude and latitude   columns."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:110
#: b7ea67ba61374a75902fd044945017a6
msgid "DataFrame of ports with locode, port_name, longitude and latitude"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:111
#: 4e193aeabeb14a9485ea4ca5b016911f
msgid "columns."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:117
#: b7e92cc62ec4421ababafa41722ed6f9
msgid ""
"Returns the set of distinct port locodes where at least one control was "
"done."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:120
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:129
#: 4280c51667af4628a4919df2e38c269a aaff81b8d8cb4e77bf2c16f78983f7de
msgid "set of port locodes"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:126
#: 2e6f6101caad4fb29d9d2d8bf5ef2e4a
msgid ""
"Returns the set of distinct port locodes used at least once in an ERS DEP, "
"PNO ou LAN message."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:135
#: dc0f21a1ed49443babcad4bc7e2be888
msgid ""
"Returns a DataFrame with latitude, longitude columns corresponding to S2 "
"cells identified as docks in AIS global positions."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:144
#: b2731da310284e5f884924e83b4ded8c
msgid "DataFrame with latitude and longitude columns."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:153
#: 0115dc1d57ad4e7485f69cd29bf50cda
msgid ""
"Bins input positions into h3 cells of the given resolutions and filters said"
" h3 cells to keep only the ones that appear at least "
"`number_signals_threshold` times in the dataset."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:157
#: ec7b70bc586e42e38c47cfe017bd8202
msgid "DataFrame with latitude and longitude columns"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:160
#: 09f5cb8383c14faab0c4cd8b49e90aa4
msgid "h3 resolution to use"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:162
#: 5a47742b5c6b419c89260d7d478a6e15
msgid "number of occurences below which h3 cells are filtered out"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:169
#: 547967083f23440abf0303128e1aa637
msgid ""
"Unites two sets of h3 cells corresponding to anchorage locations of vessels "
"in AIS and VMS data, then adds two \"rings\" of cells around them. Returns "
"the result as a DataFrame containing the indices, latitude and longitude of "
"cells as well as whether each cell was present in the original cells (ring "
"0) or was added in rings 1 and 2 that surround the initial cells."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:175
#: e0c400bdfc104a6c85267e5ace3f6c98
msgid "set of indices of h3 cells where vessels anchor (AIS data)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:178
#: 819e7d88a83d4c9492eeb088756b35c0
msgid "set of indices of h3 cells where vessels anchor (VMS data)"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:181
#: fc622cc0d3cb40cd8c6025f4ee82cdd4
msgid "set of additional indices of h3 cells"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:184
#: 1f74a89bce974491b19d25d122c3e224
msgid "DataFrame of h3 cells with 2 levels of rings added"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:192
#: f1a3f99bb8a94ef5ab2f0997606ce284
msgid "DataFrame with columns matching the fields of a PortLocation object."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:196
#: d4ed3591171b470d898c2790736dee28
msgid "List[PortLocation]"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:206
#: c6bb77ac06f04afc82cb51910a5cb389
msgid "set of the locodes of ports used in ERS"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:208
#: 0e238de66a3c4a4599c6571872c1c9e9
msgid "set of the locodes of ports used in controls"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:211
#: 6ba7b5b0e43b487899d666661163d749
msgid "union of the two input sets"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:237
#: e39350cdc816467f820ec01c0e351746
msgid "url to download the data from."
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:239
#: 0cb32e465736458caa02d021f14faf27
msgid "dict with http_proxy and https_proxy settings to use for the download"
msgstr ""

#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:243
#: ../source/autoapi/monitorfish/datascience/src/pipeline/flows/anchorages/index.rst:251
#: dc9c246d3d504878a44a502c655fe373 f8d2ff44ac5f4ddbb3852079811533e3
msgid "anchorages data"
msgstr ""
